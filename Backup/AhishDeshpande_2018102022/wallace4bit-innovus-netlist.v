/*
###############################################################
#  Generated by:      Cadence Innovus 16.21-s078_1
#  OS:                Linux x86_64(Host ID client02)
#  Generated on:      Sat Oct 12 01:29:58 2019
#  Design:            wallace4bit
#  Command:           saveNetlist wallace4bit-innovus-netlist.v
###############################################################
*/
// Generated by Cadence Genus(TM) Synthesis Solution 16.21-s018_1
// Generated on: Oct 12 2019 01:21:48 IST (Oct 11 2019 19:51:48 UTC)
// Verification Directory fv/wallace4bit 
module fulladder (
	A, 
	B, 
	C0, 
	S, 
	C1);
   input A;
   input B;
   input C0;
   output S;
   output C1;

   ADDFX1 g2 (.A(C0),
	.B(A),
	.CI(B),
	.CO(C1),
	.S(S));
endmodule

module fulladder_1 (
	A, 
	B, 
	C0, 
	S, 
	C1);
   input A;
   input B;
   input C0;
   output S;
   output C1;

   ADDFX1 g2 (.A(C0),
	.B(A),
	.CI(B),
	.CO(C1),
	.S(S));
endmodule

module fulladder_2 (
	A, 
	B, 
	C0, 
	S, 
	C1);
   input A;
   input B;
   input C0;
   output S;
   output C1;

   ADDFX1 g2 (.A(C0),
	.B(A),
	.CI(B),
	.CO(C1),
	.S(S));
endmodule

module fulladder_3 (
	A, 
	B, 
	C0, 
	S, 
	C1);
   input A;
   input B;
   input C0;
   output S;
   output C1;

   ADDFX1 g2 (.A(C0),
	.B(A),
	.CI(B),
	.CO(C1),
	.S(S));
endmodule

module fulladder_4 (
	A, 
	B, 
	C0, 
	S, 
	C1);
   input A;
   input B;
   input C0;
   output S;
   output C1;

   ADDFX1 g2 (.A(C0),
	.B(A),
	.CI(B),
	.CO(C1),
	.S(S));
endmodule

module fulladder_5 (
	A, 
	B, 
	C0, 
	S, 
	C1);
   input A;
   input B;
   input C0;
   output S;
   output C1;

   ADDFX1 g2 (.A(A),
	.B(B),
	.CI(C0),
	.CO(C1),
	.S(S));
endmodule

module fulladder_6 (
	A, 
	B, 
	C0, 
	S, 
	C1);
   input A;
   input B;
   input C0;
   output S;
   output C1;

   ADDFX1 g2 (.A(C0),
	.B(B),
	.CI(A),
	.CO(C1),
	.S(S));
endmodule

module fulladder_7 (
	A, 
	B, 
	C0, 
	S, 
	C1);
   input A;
   input B;
   input C0;
   output S;
   output C1;

   ADDFX1 g2 (.A(A),
	.B(B),
	.CI(C0),
	.CO(C1),
	.S(S));
endmodule

module halfadder (
	A, 
	B, 
	S, 
	C);
   input A;
   input B;
   output S;
   output C;

   ADDHXL g17 (.A(A),
	.B(B),
	.CO(C),
	.S(S));
endmodule

module halfadder_1 (
	A, 
	B, 
	S, 
	C);
   input A;
   input B;
   output S;
   output C;

   ADDHXL g17 (.A(A),
	.B(B),
	.CO(C),
	.S(S));
endmodule

module halfadder_2 (
	A, 
	B, 
	S, 
	C);
   input A;
   input B;
   output S;
   output C;

   ADDHXL g17 (.A(A),
	.B(B),
	.CO(C),
	.S(S));
endmodule

module halfadder_3 (
	A, 
	B, 
	S, 
	C);
   input A;
   input B;
   output S;
   output C;

   ADDHXL g17 (.A(A),
	.B(B),
	.CO(C),
	.S(S));
endmodule

module wallace4bit (
	A, 
	B, 
	product);
   input [3:0] A;
   input [3:0] B;
   output [7:0] product;

   // Internal wires
   wire [6:0] p0;
   wire [6:0] p1;
   wire [6:0] p2;
   wire [6:0] p3;
   wire int2_1;
   wire int2_2;
   wire int3_1;
   wire int3_2;
   wire int3_3;
   wire int3_4;
   wire int4_1;
   wire int4_2;
   wire int4_3;
   wire int4_4;
   wire int4_5;
   wire int5_1;
   wire int5_2;
   wire int5_3;
   wire int5_4;
   wire int6_1;
   wire int6_2;

   fulladder F1 (.A(p0[2]),
	.B(p1[1]),
	.C0(p2[0]),
	.S(int2_2),
	.C1(int3_1));
   fulladder_1 F2 (.A(p0[3]),
	.B(p1[2]),
	.C0(p2[1]),
	.S(int3_3),
	.C1(int4_1));
   fulladder_2 F3 (.A(p3[0]),
	.B(int3_1),
	.C0(int3_2),
	.S(int3_4),
	.C1(int4_2));
   fulladder_3 F4 (.A(p1[3]),
	.B(p2[2]),
	.C0(p3[1]),
	.S(int4_4),
	.C1(int5_1));
   fulladder_4 F5 (.A(int4_1),
	.B(int4_2),
	.C0(int4_3),
	.S(int4_5),
	.C1(int5_2));
   fulladder_5 F6 (.A(p2[3]),
	.B(p3[2]),
	.C0(int5_1),
	.S(int5_4),
	.C1(int6_1));
   fulladder_6 F7 (.A(int5_2),
	.B(int5_3),
	.C0(int5_4),
	.S(product[5]),
	.C1(int6_2));
   fulladder_7 F8 (.A(p3[3]),
	.B(int6_1),
	.C0(int6_2),
	.S(product[6]),
	.C1(product[7]));
   halfadder H1 (.A(p0[1]),
	.B(p1[0]),
	.S(product[1]),
	.C(int2_1));
   halfadder_1 H2 (.A(int2_1),
	.B(int2_2),
	.S(product[2]),
	.C(int3_2));
   halfadder_2 H3 (.A(int3_3),
	.B(int3_4),
	.S(product[3]),
	.C(int4_3));
   halfadder_3 H4 (.A(int4_4),
	.B(int4_5),
	.S(product[4]),
	.C(int5_3));
   AND2X1 g113 (.A(B[1]),
	.B(A[2]),
	.Y(p1[2]));
   AND2X1 g114 (.A(B[1]),
	.B(A[1]),
	.Y(p1[1]));
   AND2X1 g115 (.A(B[1]),
	.B(A[0]),
	.Y(p1[0]));
   AND2X1 g116 (.A(B[3]),
	.B(A[1]),
	.Y(p3[1]));
   AND2XL g117 (.A(B[0]),
	.B(A[0]),
	.Y(product[0]));
   AND2X1 g118 (.A(B[2]),
	.B(A[3]),
	.Y(p2[3]));
   AND2X1 g119 (.A(B[1]),
	.B(A[3]),
	.Y(p1[3]));
   AND2X1 g120 (.A(B[2]),
	.B(A[0]),
	.Y(p2[0]));
   AND2X1 g121 (.A(B[2]),
	.B(A[2]),
	.Y(p2[2]));
   AND2X1 g122 (.A(B[2]),
	.B(A[1]),
	.Y(p2[1]));
   AND2X1 g123 (.A(B[3]),
	.B(A[0]),
	.Y(p3[0]));
   AND2X1 g124 (.A(B[0]),
	.B(A[3]),
	.Y(p0[3]));
   AND2X1 g125 (.A(B[3]),
	.B(A[3]),
	.Y(p3[3]));
   AND2X1 g126 (.A(B[0]),
	.B(A[1]),
	.Y(p0[1]));
   AND2X1 g127 (.A(B[3]),
	.B(A[2]),
	.Y(p3[2]));
   AND2X1 g128 (.A(B[0]),
	.B(A[2]),
	.Y(p0[2]));
endmodule

