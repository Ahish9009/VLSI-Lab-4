
// Generated by Cadence Genus(TM) Synthesis Solution 16.21-s018_1
// Generated on: Oct 12 2019 01:21:48 IST (Oct 11 2019 19:51:48 UTC)

// Verification Directory fv/wallace4bit 

module fulladder(A, B, C0, S, C1);
  input A, B, C0;
  output S, C1;
  wire A, B, C0;
  wire S, C1;
  ADDFX1 g2(.A (C0), .B (A), .CI (B), .CO (C1), .S (S));
endmodule

module fulladder_1(A, B, C0, S, C1);
  input A, B, C0;
  output S, C1;
  wire A, B, C0;
  wire S, C1;
  ADDFX1 g2(.A (C0), .B (A), .CI (B), .CO (C1), .S (S));
endmodule

module fulladder_2(A, B, C0, S, C1);
  input A, B, C0;
  output S, C1;
  wire A, B, C0;
  wire S, C1;
  ADDFX1 g2(.A (C0), .B (A), .CI (B), .CO (C1), .S (S));
endmodule

module fulladder_3(A, B, C0, S, C1);
  input A, B, C0;
  output S, C1;
  wire A, B, C0;
  wire S, C1;
  ADDFX1 g2(.A (C0), .B (A), .CI (B), .CO (C1), .S (S));
endmodule

module fulladder_4(A, B, C0, S, C1);
  input A, B, C0;
  output S, C1;
  wire A, B, C0;
  wire S, C1;
  ADDFX1 g2(.A (C0), .B (A), .CI (B), .CO (C1), .S (S));
endmodule

module fulladder_5(A, B, C0, S, C1);
  input A, B, C0;
  output S, C1;
  wire A, B, C0;
  wire S, C1;
  ADDFX1 g2(.A (A), .B (B), .CI (C0), .CO (C1), .S (S));
endmodule

module fulladder_6(A, B, C0, S, C1);
  input A, B, C0;
  output S, C1;
  wire A, B, C0;
  wire S, C1;
  ADDFX1 g2(.A (C0), .B (B), .CI (A), .CO (C1), .S (S));
endmodule

module fulladder_7(A, B, C0, S, C1);
  input A, B, C0;
  output S, C1;
  wire A, B, C0;
  wire S, C1;
  ADDFX1 g2(.A (A), .B (B), .CI (C0), .CO (C1), .S (S));
endmodule

module halfadder(A, B, S, C);
  input A, B;
  output S, C;
  wire A, B;
  wire S, C;
  ADDHXL g17(.A (A), .B (B), .CO (C), .S (S));
endmodule

module halfadder_1(A, B, S, C);
  input A, B;
  output S, C;
  wire A, B;
  wire S, C;
  ADDHXL g17(.A (A), .B (B), .CO (C), .S (S));
endmodule

module halfadder_2(A, B, S, C);
  input A, B;
  output S, C;
  wire A, B;
  wire S, C;
  ADDHXL g17(.A (A), .B (B), .CO (C), .S (S));
endmodule

module halfadder_3(A, B, S, C);
  input A, B;
  output S, C;
  wire A, B;
  wire S, C;
  ADDHXL g17(.A (A), .B (B), .CO (C), .S (S));
endmodule

module wallace4bit(A, B, product);
  input [3:0] A, B;
  output [7:0] product;
  wire [3:0] A, B;
  wire [7:0] product;
  wire [6:0] p0;
  wire [6:0] p1;
  wire [6:0] p2;
  wire [6:0] p3;
  wire int2_1, int2_2, int3_1, int3_2, int3_3, int3_4, int4_1, int4_2;
  wire int4_3, int4_4, int4_5, int5_1, int5_2, int5_3, int5_4, int6_1;
  wire int6_2;
  fulladder F1(p0[2], p1[1], p2[0], int2_2, int3_1);
  fulladder_1 F2(p0[3], p1[2], p2[1], int3_3, int4_1);
  fulladder_2 F3(p3[0], int3_1, int3_2, int3_4, int4_2);
  fulladder_3 F4(p1[3], p2[2], p3[1], int4_4, int5_1);
  fulladder_4 F5(int4_1, int4_2, int4_3, int4_5, int5_2);
  fulladder_5 F6(p2[3], p3[2], int5_1, int5_4, int6_1);
  fulladder_6 F7(int5_2, int5_3, int5_4, product[5], int6_2);
  fulladder_7 F8(p3[3], int6_1, int6_2, product[6], product[7]);
  halfadder H1(p0[1], p1[0], product[1], int2_1);
  halfadder_1 H2(int2_1, int2_2, product[2], int3_2);
  halfadder_2 H3(int3_3, int3_4, product[3], int4_3);
  halfadder_3 H4(int4_4, int4_5, product[4], int5_3);
  AND2X1 g113(.A (B[1]), .B (A[2]), .Y (p1[2]));
  AND2X1 g114(.A (B[1]), .B (A[1]), .Y (p1[1]));
  AND2X1 g115(.A (B[1]), .B (A[0]), .Y (p1[0]));
  AND2X1 g116(.A (B[3]), .B (A[1]), .Y (p3[1]));
  AND2XL g117(.A (B[0]), .B (A[0]), .Y (product[0]));
  AND2X1 g118(.A (B[2]), .B (A[3]), .Y (p2[3]));
  AND2X1 g119(.A (B[1]), .B (A[3]), .Y (p1[3]));
  AND2X1 g120(.A (B[2]), .B (A[0]), .Y (p2[0]));
  AND2X1 g121(.A (B[2]), .B (A[2]), .Y (p2[2]));
  AND2X1 g122(.A (B[2]), .B (A[1]), .Y (p2[1]));
  AND2X1 g123(.A (B[3]), .B (A[0]), .Y (p3[0]));
  AND2X1 g124(.A (B[0]), .B (A[3]), .Y (p0[3]));
  AND2X1 g125(.A (B[3]), .B (A[3]), .Y (p3[3]));
  AND2X1 g126(.A (B[0]), .B (A[1]), .Y (p0[1]));
  AND2X1 g127(.A (B[3]), .B (A[2]), .Y (p3[2]));
  AND2X1 g128(.A (B[0]), .B (A[2]), .Y (p0[2]));
endmodule

